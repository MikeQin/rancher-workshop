# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'ipaddr'
require 'yaml'

x = YAML.load_file('config.yaml')
puts "Config: #{x.inspect}\n\n"

$private_nic_type = x.fetch('net').fetch('private_nic_type')

Vagrant.configure(2) do |config|

  # User and Proxy
  user = ENV['USER']
  password = ENV['PASSWORD']
  host = ENV['HOSTNAME'] || "gateway.zscloud.net"
  port = ENV['PORT'] || "10336"

  # Box info
  baseBox = ENV['BASE_BOX'] || "ubuntu/xenial64"
  baseBoxVersion = ENV['BASE_BOX_VERSION'] || "20190222.03"

  # Flag default to true
  proceed = true
  messages = []

  # Validate Env vars
  if user.nil? || user.empty?
    messages.push('USER')
  end
  if password.nil? || password.empty?
    messages.push('PASSWORD')
  end
  if host.nil? || host.empty?
    messages.push('HOSTNAME')
  end
  if port.nil? || port.empty?
    messages.push('PORT')
  end

  # Check if there is any error
  if messages.length > 0
    proceed = false
    puts "ERROR: Environment Variables Missing OR Not Set", messages
    abort
  end

  # "http://gateway.zscloud.net:10336/"
  httpProxy = "http://" + user + ":" + password + "@" + host + ":" + port + "/"

  # Initial configuration of http proxy
  proxyConfig(config, httpProxy)

  config.vm.define "server-01" do |server|
    c = x.fetch('server')
    # peru/ubuntu-18.04-desktop-amd64 | ubuntu/xenial64
    server.vm.box= "ubuntu/xenial64"
    # server.vm.guest = :linux
    server.vm.provision "file", source: "./certs/ZscalerRootCA.cer", destination: "/home/vagrant/ZscalerRootCA.cer"
    server.vm.provision "file", source: "./certs/single_file_all_certs.pem", destination: "/tmp/single_file_all_certs.pem"
    server.vm.provider :virtualbox do |v|
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.cpus = c.fetch('cpus')
      v.linked_clone = true if Gem::Version.new(Vagrant::VERSION) >= Gem::Version.new('1.8.0') and x.fetch('linked_clones')
      v.memory = c.fetch('memory')
      v.name = "server-01"
    end
    server.vm.network x.fetch('net').fetch('network_type'), ip: x.fetch('ip').fetch('server') , nic_type: $private_nic_type
    server.vm.hostname = "server-01"
    server.vm.provision "shell", path: "scripts/configure_rancher.sh",
      env: {
        'admin_password' => x.fetch('default_password'),
        'docker_version' => x.fetch('docker_version').fetch('server'),
        'rancher_version' => x.fetch('rancher_version'),
        'cluster_name' => x.fetch('cluster_name'),
        'rodeo' => x.fetch('rodeo'),
        'rancher_role' => 'server',
        'rancher_server_ip' => x.fetch('ip').fetch('server')
      }
  end

  node_ip_start = IPAddr.new(x.fetch('ip').fetch('node'))

  (1..x.fetch('node').fetch('count')).each do |i|
    c = x.fetch('node')
    hostname = "node-%02d" % i
    node_ip = IPAddr.new(node_ip_start.to_i + i - 1, Socket::AF_INET).to_s
    config.vm.define hostname do |node|
      node.vm.box   = "ubuntu/xenial64"
      # node.vm.guest = :linux
      node.vm.provision "file", source: "./certs/ZscalerRootCA.cer", destination: "/home/vagrant/ZscalerRootCA.cer"
      node.vm.provision "file", source: "./certs/single_file_all_certs.pem", destination: "/tmp/single_file_all_certs.pem"      
      node.vm.provider "virtualbox" do |v|
        v.cpus = c.fetch('cpus')
        v.linked_clone = true if Gem::Version.new(Vagrant::VERSION) >= Gem::Version.new('1.8.0') and x.fetch('linked_clones')
        v.memory = c.fetch('memory')
        v.name = hostname
      end
      node.vm.network x.fetch('net').fetch('network_type'), ip: node_ip, nic_type: $private_nic_type
      node.vm.hostname = hostname
      node.vm.provision "shell", path: "scripts/configure_rancher.sh",
        env: {
          'admin_password' => x.fetch('default_password'),
          'docker_version' => x.fetch('docker_version').fetch('node'),
          'cluster_name' => x.fetch('cluster_name'),
          'rodeo' => x.fetch('rodeo'),
          'rancher_role' => x.fetch('roles').fetch(hostname, 'all'),
          'rancher_server_ip' => x.fetch('ip').fetch('server'),
          'node_ip' => node_ip
        }
    end
  end

end

# Plugin: vagrant-proxyconf
# Apt, Docker, environment, Git, npm
def proxyConfig(config, httpProxy)
  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http = httpProxy
    config.proxy.https = httpProxy
    config.apt_proxy.http = httpProxy
    config.apt_proxy.https = httpProxy
    config.proxy.no_proxy = "localhost,127.0.0.1,.zscloud.net"
  else
    puts 'vagrant-proxyconf plugin required. To install simply do `vagrant plugin install vagrant-proxyconf`'
    abort  
  end
end